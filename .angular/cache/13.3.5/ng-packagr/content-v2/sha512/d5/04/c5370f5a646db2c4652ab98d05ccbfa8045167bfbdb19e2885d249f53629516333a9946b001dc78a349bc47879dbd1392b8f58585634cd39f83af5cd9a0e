{"hash":"bfd01e38ec50aefff06b3882f02bd2564cac5287","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass NgIdleDetectorService {\n    constructor() {\n        this.expired$ = new Subject();\n    }\n    startWatching(timeOutSeconds) {\n        this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n        this.timeOutMilliSeconds = timeOutSeconds * 1000;\n        this.idleSubscription = this.idle$.subscribe((res) => {\n            this.resetTimer();\n        });\n        this.startTimer();\n        return this.expired$;\n    }\n    startTimer() {\n        this.timer$ = timer(this.timeOutMilliSeconds).subscribe((res) => {\n            this.expired$.next(true);\n        });\n    }\n    resetTimer() {\n        this.timer$.unsubscribe();\n        this.startTimer();\n    }\n    stopTimer() {\n        this.timer$.unsubscribe();\n        this.idleSubscription.unsubscribe();\n    }\n}\nNgIdleDetectorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgIdleDetectorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass NgIdleDetectorModule {\n}\nNgIdleDetectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgIdleDetectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule });\nNgIdleDetectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, providers: [NgIdleDetectorService], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [],\n                    exports: [],\n                    providers: [NgIdleDetectorService],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-idle-detector\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgIdleDetectorModule, NgIdleDetectorService };\n//# sourceMappingURL=ng-idle-detector.mjs.map\n","map":{"version":3,"file":"ng-idle-detector.mjs","sources":["../../../projects/ng-idle-detector/src/lib/ng-idle-detector.service.ts","../../../projects/ng-idle-detector/src/lib/ng-idle-detector.module.ts","../../../projects/ng-idle-detector/src/public-api.ts","../../../projects/ng-idle-detector/src/ng-idle-detector.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, fromEvent, merge, Subject, timer, Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgIdleDetectorService {\n  private idle$: Observable<any>;\n  private timer$: Subscription;\n  private timeOutMilliSeconds: number;\n  private idleSubscription: Subscription;\n\n  public expired$: Subject<boolean> = new Subject<boolean>();\n  constructor() { }\n\n  public startWatching(timeOutSeconds: number): Observable<any> {\n    this.idle$ = merge(\n      fromEvent(document, 'mousemove'),\n      fromEvent(document, 'click'),\n      fromEvent(document, 'mousedown'),\n      fromEvent(document, 'keypress'),\n      fromEvent(document, 'DOMMouseScroll'),\n      fromEvent(document, 'mousewheel'),\n      fromEvent(document, 'touchmove'),\n      fromEvent(document, 'MSPointerMove'),\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n    );\n\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n\n    this.idleSubscription = this.idle$.subscribe((res) => {\n      this.resetTimer();\n    });\n\n    this.startTimer();\n\n    return this.expired$;\n  }\n\n  private startTimer() {\n    this.timer$ = timer(this.timeOutMilliSeconds).subscribe((res) => {\n      this.expired$.next(true);\n    });\n  }\n\n  public resetTimer() {\n    this.timer$.unsubscribe();\n    this.startTimer();\n  }\n\n  public stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n}","import { NgModule } from '@angular/core';\nimport { NgIdleDetectorService } from './ng-idle-detector.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [NgIdleDetectorService],\n})\nexport class NgIdleDetectorModule { }\n","/*\n * Public API Surface of ng-idle-detector\n */\n\nexport * from './lib/ng-idle-detector.service';\nexport * from './lib/ng-idle-detector.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass NgIdleDetectorService {\n    constructor() {\n        this.expired$ = new Subject();\n    }\n    startWatching(timeOutSeconds) {\n        this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n        this.timeOutMilliSeconds = timeOutSeconds * 1000;\n        this.idleSubscription = this.idle$.subscribe((res) => {\n            this.resetTimer();\n        });\n        this.startTimer();\n        return this.expired$;\n    }\n    startTimer() {\n        this.timer$ = timer(this.timeOutMilliSeconds).subscribe((res) => {\n            this.expired$.next(true);\n        });\n    }\n    resetTimer() {\n        this.timer$.unsubscribe();\n        this.startTimer();\n    }\n    stopTimer() {\n        this.timer$.unsubscribe();\n        this.idleSubscription.unsubscribe();\n    }\n}\nNgIdleDetectorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgIdleDetectorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass NgIdleDetectorModule {\n}\nNgIdleDetectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgIdleDetectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule });\nNgIdleDetectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, providers: [NgIdleDetectorService], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [],\n                    exports: [],\n                    providers: [NgIdleDetectorService],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-idle-detector\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgIdleDetectorModule, NgIdleDetectorService };\n//# sourceMappingURL=ng-idle-detector.mjs.map\n","map":{"version":3,"file":"ng-idle-detector.mjs","sources":["../../../projects/ng-idle-detector/src/lib/ng-idle-detector.service.ts","../../../projects/ng-idle-detector/src/lib/ng-idle-detector.module.ts","../../../projects/ng-idle-detector/src/public-api.ts","../../../projects/ng-idle-detector/src/ng-idle-detector.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, fromEvent, merge, Subject, timer, Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgIdleDetectorService {\n  private idle$: Observable<any>;\n  private timer$: Subscription;\n  private timeOutMilliSeconds: number;\n  private idleSubscription: Subscription;\n\n  public expired$: Subject<boolean> = new Subject<boolean>();\n  constructor() { }\n\n  public startWatching(timeOutSeconds: number): Observable<any> {\n    this.idle$ = merge(\n      fromEvent(document, 'mousemove'),\n      fromEvent(document, 'click'),\n      fromEvent(document, 'mousedown'),\n      fromEvent(document, 'keypress'),\n      fromEvent(document, 'DOMMouseScroll'),\n      fromEvent(document, 'mousewheel'),\n      fromEvent(document, 'touchmove'),\n      fromEvent(document, 'MSPointerMove'),\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n    );\n\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n\n    this.idleSubscription = this.idle$.subscribe((res) => {\n      this.resetTimer();\n    });\n\n    this.startTimer();\n\n    return this.expired$;\n  }\n\n  private startTimer() {\n    this.timer$ = timer(this.timeOutMilliSeconds).subscribe((res) => {\n      this.expired$.next(true);\n    });\n  }\n\n  public resetTimer() {\n    this.timer$.unsubscribe();\n    this.startTimer();\n  }\n\n  public stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n}","import { NgModule } from '@angular/core';\nimport { NgIdleDetectorService } from './ng-idle-detector.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n  providers: [NgIdleDetectorService],\n})\nexport class NgIdleDetectorModule { }\n","/*\n * Public API Surface of ng-idle-detector\n */\n\nexport * from './lib/ng-idle-detector.service';\nexport * from './lib/ng-idle-detector.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}
{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass NgIdleDetectorService {\n  constructor() {\n    this.expired$ = new Subject();\n  }\n\n  startWatching(timeOutSeconds) {\n    this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n    this.timeOutMilliSeconds = timeOutSeconds * 1000;\n    this.idleSubscription = this.idle$.subscribe(res => {\n      this.resetTimer();\n    });\n    this.startTimer();\n    return this.expired$;\n  }\n\n  startTimer() {\n    this.timer$ = timer(this.timeOutMilliSeconds).subscribe(res => {\n      this.expired$.next(true);\n    });\n  }\n\n  resetTimer() {\n    this.timer$.unsubscribe();\n    this.startTimer();\n  }\n\n  stopTimer() {\n    this.timer$.unsubscribe();\n    this.idleSubscription.unsubscribe();\n  }\n\n}\n\nNgIdleDetectorService.ɵfac = function NgIdleDetectorService_Factory(t) {\n  return new (t || NgIdleDetectorService)();\n};\n\nNgIdleDetectorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgIdleDetectorService,\n  factory: NgIdleDetectorService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIdleDetectorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass NgIdleDetectorModule {}\n\nNgIdleDetectorModule.ɵfac = function NgIdleDetectorModule_Factory(t) {\n  return new (t || NgIdleDetectorModule)();\n};\n\nNgIdleDetectorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgIdleDetectorModule\n});\nNgIdleDetectorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgIdleDetectorService],\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIdleDetectorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [],\n      exports: [],\n      providers: [NgIdleDetectorService]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng-idle-detector\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgIdleDetectorModule, NgIdleDetectorService };","map":{"version":3,"sources":["/Users/saurabhmanchanda/Documents/Work/Personal/Npm Packages/ng-idle-detector/dist/ng-idle-detector/fesm2015/ng-idle-detector.mjs"],"names":["i0","Injectable","NgModule","Subject","merge","fromEvent","timer","NgIdleDetectorService","constructor","expired$","startWatching","timeOutSeconds","idle$","document","window","timeOutMilliSeconds","idleSubscription","subscribe","res","resetTimer","startTimer","timer$","next","unsubscribe","stopTimer","ɵfac","ɵprov","type","args","providedIn","NgIdleDetectorModule","ɵmod","ɵinj","declarations","imports","exports","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Subject, merge, fromEvent, timer } from 'rxjs';\n\nclass NgIdleDetectorService {\n    constructor() {\n        this.expired$ = new Subject();\n    }\n    startWatching(timeOutSeconds) {\n        this.idle$ = merge(fromEvent(document, 'mousemove'), fromEvent(document, 'click'), fromEvent(document, 'mousedown'), fromEvent(document, 'keypress'), fromEvent(document, 'DOMMouseScroll'), fromEvent(document, 'mousewheel'), fromEvent(document, 'touchmove'), fromEvent(document, 'MSPointerMove'), fromEvent(window, 'mousemove'), fromEvent(window, 'resize'));\n        this.timeOutMilliSeconds = timeOutSeconds * 1000;\n        this.idleSubscription = this.idle$.subscribe((res) => {\n            this.resetTimer();\n        });\n        this.startTimer();\n        return this.expired$;\n    }\n    startTimer() {\n        this.timer$ = timer(this.timeOutMilliSeconds).subscribe((res) => {\n            this.expired$.next(true);\n        });\n    }\n    resetTimer() {\n        this.timer$.unsubscribe();\n        this.startTimer();\n    }\n    stopTimer() {\n        this.timer$.unsubscribe();\n        this.idleSubscription.unsubscribe();\n    }\n}\nNgIdleDetectorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgIdleDetectorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass NgIdleDetectorModule {\n}\nNgIdleDetectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgIdleDetectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule });\nNgIdleDetectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, providers: [NgIdleDetectorService], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.8\", ngImport: i0, type: NgIdleDetectorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [],\n                    imports: [],\n                    exports: [],\n                    providers: [NgIdleDetectorService],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-idle-detector\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgIdleDetectorModule, NgIdleDetectorService };\n"]},"metadata":{},"sourceType":"module"}